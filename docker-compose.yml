version: '3.8'

services:
  # Our working API Backend
  api-backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      - API_PORT=3000
      - CHAINPULSE_URL=http://chainpulse:3001
      - DATABASE_URL=postgresql://relayooor:relayooor@postgres:5432/relayooor?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - RPC_USERNAME=${RPC_USERNAME}
      - RPC_PASSWORD=${RPC_PASSWORD}
    ports:
      - "3000:8080"
    restart: unless-stopped
    networks:
      - relayooor-net
    depends_on:
      - chainpulse
      - postgres
      - redis

  # Chainpulse Monitoring
  chainpulse:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    environment:
      - RPC_USERNAME=${RPC_USERNAME}
      - RPC_PASSWORD=${RPC_PASSWORD}
      - COSMOS_WS_URL=${COSMOS_WS_URL:-wss://cosmos-rpc.polkachu.com/websocket}
      - OSMOSIS_WS_URL=${OSMOSIS_WS_URL:-wss://osmosis-rpc.polkachu.com/websocket}
      - NEUTRON_WS_URL=${NEUTRON_WS_URL:-wss://neutron-rpc.polkachu.com/websocket}
      - NOBLE_WS_URL=${NOBLE_WS_URL:-wss://noble-rpc.polkachu.com/websocket}
    volumes:
      - ./config/chainpulse-selected.toml:/config/chainpulse.toml:ro
      - chainpulse-data:/data
    ports:
      - "3001:3001"  # Metrics endpoint
    restart: unless-stopped
    networks:
      - relayooor-net

  # Frontend Web Application
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=http://localhost:3000
      - VITE_CHAINPULSE_URL=http://localhost:3001
    ports:
      - "80:80"
    depends_on:
      - api-backend
      - chainpulse
    restart: unless-stopped
    networks:
      - relayooor-net

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=relayooor
      - POSTGRES_PASSWORD=relayooor
      - POSTGRES_DB=relayooor
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - relayooor-net

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - relayooor-net

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - relayooor-net
    depends_on:
      - chainpulse

  # Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3003:3000"
    restart: unless-stopped
    networks:
      - relayooor-net
    depends_on:
      - prometheus

networks:
  relayooor-net:
    driver: bridge

volumes:
  chainpulse-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: